/*
====================================================================================
üéØ JAVA TERNARY OPERATOR ‚Äì COMPLETE THEORY GUIDE (Beginner ‚û°Ô∏è Advanced)
====================================================================================

üß† WHAT IS THE TERNARY OPERATOR?
------------------------------------------------------------------------------------
The **ternary operator** is a shorthand for writing simple `if-else` statements
in Java. It‚Äôs called **"ternary"** because it involves **three operands**.

üìå Syntax:
-----------

    condition ? expressionIfTrue : expressionIfFalse;

‚úÖ If the condition is true ‚û°Ô∏è expressionIfTrue is executed
‚ùå If the condition is false ‚û°Ô∏è expressionIfFalse is executed

üì¶ It‚Äôs a concise alternative to:
--------------------------------
    if (condition) {
        return value1;
    } else {
        return value2;
    }

üëÜ The ternary operator does the same in **one line**.

====================================================================================
üî£ BASIC STRUCTURE AND SYNTAX
====================================================================================

(condition) ? value_if_true : value_if_false;

üß© Components:
--------------
- `condition`        ‚Üí a boolean expression (evaluates to true or false)
- `value_if_true`    ‚Üí returned if condition is true
- `value_if_false`   ‚Üí returned if condition is false

üìå You can store the result in a variable:
    int max = (a > b) ? a : b;

====================================================================================
üß™ EXAMPLES (THEORY ONLY ‚Äì NO EXECUTION HERE)
====================================================================================

üî∏ Example 1: Determine greater value
    int max = (a > b) ? a : b;

üî∏ Example 2: Check if a number is even or odd
    String result = (num % 2 == 0) ? "Even" : "Odd";

üî∏ Example 3: Assign discount based on age
    double discount = (age >= 60) ? 0.20 : 0.10;

üî∏ Example 4: Nested ternary (‚ö†Ô∏è Not recommended unless very clear!)
    String grade = (score >= 90) ? "A" :
                   (score >= 80) ? "B" :
                   (score >= 70) ? "C" : "F";

====================================================================================
‚ö†Ô∏è WHEN (AND WHEN NOT) TO USE THE TERNARY OPERATOR
====================================================================================

‚úÖ When:
- You have a **simple conditional assignment**
- Code clarity is not affected
- You're assigning a value based on a boolean condition

‚ùå Avoid when:
- You‚Äôre doing **multiple actions or side effects**
- You need multiple conditions AND it hurts readability
- You're handling long expressions or logic chains

Example of BAD use:
-------------------
    (age >= 18) ? System.out.println("Adult") : System.out.println("Child");

üö´ Reason: Ternary should return **values**, not control flow!

====================================================================================
üí° BEST PRACTICES
====================================================================================

‚úîÔ∏è Keep ternary operations simple
‚úîÔ∏è Use parentheses for readability if nested
‚úîÔ∏è Don‚Äôt use it if `if-else` is more expressive
‚úîÔ∏è Use it only for value assignment (not full logic blocks)
‚úîÔ∏è Avoid nesting ternaries unless absolutely needed

====================================================================================
üîß UNDER THE HOOD (ADVANCED)
====================================================================================

- The ternary operator is actually just **syntactic sugar** for `if-else`.
- Under the hood, the compiler replaces it with branching logic.
- It works with all data types (int, String, double, etc.)
- Can be **used in return statements** for clean expression-based returns.

    Example:
    return (score >= 40) ? "Pass" : "Fail";

====================================================================================
üìå SUMMARY TABLE ‚Äì QUICK LOOKUP
====================================================================================

| Concept       | Description                                |
|---------------|--------------------------------------------|
| ?:            | Ternary Operator syntax                    |
| condition     | Boolean expression to evaluate             |
| true result   | Value returned if condition is true        |
| false result  | Value returned if condition is false       |
| Return type   | Must be the same or compatible types       |
| Use case      | Replacing short if-else value assignments  |

====================================================================================
üß† TL;DR
====================================================================================

- Use `?:` as a **compact version** of `if-else`.
- Works well for **single-line expressions**.
- Do NOT use it for multiple statements or complex logic.
- Improves readability if used wisely.

====================================================================================
*/




public class Main {
    public static void main(String[] args) {

        /*
        ==================================================================================
        üéØ TERNARY OPERATOR IN ACTION ‚Äì BEAUTIFIED EXAMPLES
        ==================================================================================

        üß† SYNTAX REMINDER:
        --------------------
        variable = (condition) ? valueIfTrue : valueIfFalse;

        üîπ It's a one-liner shorthand for simple if-else statements.
        üîπ Improves readability for short conditional value assignments.

        ==================================================================================
        ‚úÖ EXAMPLE 1: CHECK PASS OR FAIL USING IF-ELSE AND TERNARY
        ==================================================================================
        */

        int score = 70;

        // üßæ Traditional if-else method
        if (score >= 60) {
            System.out.println("Pass!");
        } else {
            System.out.println("Fail!");
        }

        // ‚úÖ Ternary version (MUCH CLEANER!)
        String passOrFail = (score >= 60) ? "YOU'VE PASSED! üéâ" : "YOU'VE FAILED! üò¢";
        System.out.println(passOrFail);

        /*
        ==================================================================================
        ‚úÖ EXAMPLE 2: CHECK IF NUMBER IS EVEN OR ODD
        ==================================================================================
        */

        int number = 6;

        String evenOrOdd = (number % 2 == 0) ? "It's an even number üî¢" : "It's an odd number üîπ";
        System.out.println(evenOrOdd);

        /*
        ==================================================================================
        ‚úÖ EXAMPLE 3: DETERMINE TIME OF DAY (AM/PM)
        ==================================================================================
        */

        int hours = 9;

        String timeOfDay = (hours >= 12) ? "P.M. üåô" : "A.M. ‚òÄÔ∏è";
        System.out.println("Current hour: " + hours + " ‚Üí " + timeOfDay);

        /*
        ==================================================================================
        ‚úÖ EXAMPLE 4: CALCULATE TAX RATE BASED ON INCOME
        ==================================================================================
        */

        int income = 60000;

        // If income is >= 40000 ‚Üí tax = 25%, else ‚Üí 15%
        double taxRate = (income >= 40000) ? 0.25 : 0.15;

        System.out.println("Annual Income: $" + income);
        System.out.println("Tax Rate Applied: " + (taxRate * 100) + "%");

        /*
        ==================================================================================
        üîÅ SUMMARY OF WHAT WE LEARNED
        ==================================================================================
        ‚úîÔ∏è Ternary operator is useful for:
           - Short if-else decisions
           - Cleaner value assignments
           - One-liners that improve code readability

        ‚ùó Avoid using ternary for complex logic or actions (use regular if-else then)
        ‚úÖ Use it for expressions, not for control flow

        */
    }
}
